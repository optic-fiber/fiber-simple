import org.springframework.boot.gradle.plugin.SpringBootPlugin

import java.nio.file.Paths

import static org.gradle.api.JavaVersion.VERSION_12

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.cloud:spring-cloud-contract-gradle-plugin:2.1.3.RELEASE'
    }
}


plugins {
    id 'java'
    id 'idea'
    id 'groovy'
    id 'org.springframework.boot' version '2.1.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
}

apply plugin: 'spring-cloud-contract'

group = 'com.cheroliv'
version = project_version

sourceCompatibility = VERSION_12
targetCompatibility = VERSION_12

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven { url 'http://repo.spring.io/plugins-release' }
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url 'https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine' }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$spring_cloud_dependencies_version"
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
}
ext {
    set('snippetsDir', file("build/generated-snippets"))
}
configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
    compile.exclude module: 'spring-boot-starter-tomcat'
}

test {
    useJUnitPlatform {
        excludeEngines 'junit-vintage'
        includeEngines 'junit-jupiter'
    }
    outputs.dir snippetsDir
}


asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDirs = [
                'src/main/java',
                'src/main/groovy'
        ] }
    }
    test {
        java { srcDirs = [] }
        groovy { srcDirs = [
                'src/test/java',
                'src/test/groovy',
                'src/features'
        ] }
    }
}

bootJar {
    archiveVersion = project.version
}

bootRun {
    sourceResources sourceSets.main
}


dependencies {

    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'





    implementation "commons-io:commons-io:$commons_io_version"
    testImplementation "com.xlson.groovycsv:groovycsv:$groovy_csv_version"
    implementation "com.jameskleeh:excel-builder:$excel_builder_version"
    implementation "org.apache.poi:poi:$poi_version"
    implementation "org.apache.poi:poi-ooxml:$poi_version"
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'


    // GROOVY
    implementation "org.codehaus.groovy:groovy-all:$groovy_version"
    implementation 'com.google.guava:guava:28.0-jre'

    // DEVELOPER TOOLS
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // SPRING STARTING POINT RESOURCES
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // APP-SERVER
    implementation 'org.springframework.boot:spring-boot-starter-undertow'

    // DATABASE ORM
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.hibernate:hibernate-envers'

    // BEAN VALIDATION
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // BEAN MAPPING
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"

    // DATABASE ACCESS DRIVER
    implementation 'com.h2database:h2'

    // STRING HELPERS
    implementation 'org.apache.commons:commons-lang3'

    // TDD:JUNIT SPRING
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation ('org.springframework.cloud:spring-cloud-starter-contract-stub-runner'){
     exclude  group: 'org.mockito', module: 'mockito-core'
    }
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'



    // TDD:JUNIT
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
    testImplementation("org.junit.jupiter:junit-jupiter:$junit_jupiter_version") {
        exclude module: 'junit-jupiter-params'
        exclude module: 'junit-jupiter-api'
    }
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version")
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version")

    testCompileOnly 'junit:junit'

    // BDD:CUCUMBER
    testImplementation "io.cucumber:cucumber-junit:$cucumber_version"
    testImplementation "io.cucumber:cucumber-spring:$cucumber_version"
}

task dependencyReportFile(type: DependencyReportTask) {
    String outputFileName = 'dependencies.txt'
    String separator = Paths.get(System.getProperty('user.home')).fileSystem.separator
    File depFile = new File("${rootProject.projectDir}${separator}${outputFileName}".toString())
    !(depFile.exists() && !depFile.directory) ?: depFile.delete()
    outputFile = file(outputFileName)
}

task cucumberTest(type: Test) {
    description = 'Execute cucumber BDD tests.'
    group = 'verification'
    include '**/*CucumberIT*'
}

check.dependsOn cucumberTest

task cucumberTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn cucumberTest
}
